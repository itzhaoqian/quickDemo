<template>
  <div>
      <!--<list class="listWrap" onscrollbottom="loadMoreData" >
        <block for="{{a}}">
          <list-item type="list">
            <div class="liWrap">
              <image src="{{$item.src}}" class="liImg">
              <div class="descWrap">
                <text class="title">{{$item.name}}</text>
                <text class="date">{{$item.date}}</text>
                <text class="price">{{$item.price}}万</text>
              </div>
            </div>
          </list-item>
        </block>
        <list-item type="loadStatus" class="load-status">
          <progress type="circular" show="{{hasMoreData}}"></progress>
          <text show="{{hasMoreData}}">加载更多</text>
          <text show="{{!hasMoreData}}">没有更多了~</text>
        </list-item>
      </list>-->
      <text>{{a}}</text>
  </div>
</template>

<style>
  .listWrap{
    display:flex;
    padding:20px;
    flex-direction: column;
  }
  .liWrap{
    width:700px;
    height:500px;
  }
  .liImg{
    width:200px;
  }
  .descWrap{
    flex-direction:column;
    flex-wrap:wrap;
    width:500px;
    margin-left:20px;
  }
  .descWrap .title{
    
  }
  .descWrap .date{
    font-size:22px;
  }
  .descWrap .price{
    color:red;
  }
</style>

<script>
  //import {dataComponentListLazyload} from '../../Common/js/data'

  // 模拟fetch请求数据
  function callFetch (callback) {
    setTimeout(function () {
      callback(dataComponentListLazyload)
    }, 500)
  }

  // 内存中存储的列表数据
  let memList = []

  export default {
    props:['a'],
    private: {
      hasMoreData: true,
      // 每次渲染的商品数
      size: 10,
      // 是否正在fetch请求数据
      isLoadingData: false,
    },
    
     onInit () {
    //   this.$page.setTitleBar({ text: 'list-item懒加载' })
    //   // 获取数据并渲染列表
    //   this.loadAndRender()
      this.$app.$def.prompt.showToast({
            message: this.props
          })
     },
    /**
     * 请求并渲染
     */
    loadAndRender (doRender = true) {
      this.isLoadingData = true
      // 重新请求数据并根据模式判断是否需要渲染列表
      callFetch(function (resList) {
        this.isLoadingData = false
        if (!resList) {
          console.error(`数据请求错误`)
        }
        else if (!resList.length) {
          this.hasMoreData = false
        }
        else {
          memList = memList.concat(resList)
          if (doRender) {
            this._renderList()
          }
        }
      }.bind(this))
    },
    _renderList () {
      // 渲染列表
      if (memList.length > 0) {
        const list = memList.splice(0, this.size)
        this.productList = this.productList.concat(list)
      }
      if (memList.length <= this.size) {
        // 提前请求新的数据
        this.loadAndRender(false)
      }
    },
    /**
     * 滑动到底部时加载更多
     */
    renderMoreListItem () {
      if (!this.isLoadingData) {
        this._renderList()
      }
    }
  }
</script>
